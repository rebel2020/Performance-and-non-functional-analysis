{
	"Best-PracticesRecommendations": {
		"appcache-manifest": "1. Consider using the service worker Cache API instead, \n2. To help migrate from AppCache to service workers, consider the sw-appcache-behavior library. This library generates a service-worker-based implementation of the behavior defined in an AppCache manifest",

		"is-on-https": "1. Migrate your site to HTTPS, \n2. If your page is already running on HTTPS but you're failing this audit, then you may have problems with mixed content. Mixed content is when a secure site requests an unprotected (HTTP) resource",

		"uses-http2": "1. Under URLs, every resource that was not served over HTTP is listed. To pass this audit, serve each of those resources over HTTP/2,\n 2. To learn how to enable HTTP/2 on your servers, check the link : https://dassur.ma/things/h2setup/",

		"uses-passive-event-listeners": "1. Add the passive flag to every wheel, mousewheel, touchstart, and touchmove event listener that does not call preventDefault(),\n2.In browsers that support passive event listeners, marking a listener as passive is as easy as setting a flag: document.addEventListener('touchstart', onTouchStart, {passive: true});,\n3. in browsers that do not support passive event listeners, the third parameter is a boolean to indicate whether the event should bubble or capture. So, using the syntax above may cause unintended consequences,\n4. Check the link 'https://github.com/WICG/EventListenerOptions/blob/gh-pages/explainer.md#feature-detection'for more info",
		
		"no-document-write": "1. Avoid using document.write() inside pages, specifically those uses that inject scripts",
		
		"external-anchors-use-rel-noopener": "1. When you use target='_blank', always add rel='noopener' or rel='noreferrer',\n 2. rel='noopener' prevents the new page from being able to access the window.opener property and ensures it runs in a separate process, \n 3. rel='noreferrer' attribute has the same effect, but also prevents the Referer header from being sent to the new page", 
		
		"geolocation-on-start": "1. Remove the calls to user's location and  tie the requests to user gestures instead, \n 2. Check the link 'https://developers.google.com/web/fundamentals/native-hardware/user-location/#ask_permission_responsibly' for more info",
		
		"doctype": "1. Check the link 'https://developer.mozilla.org/en-US/docs/Glossary/Doctype' for more info",
		
		"no-vulnerable-libraries": "1. Upgrade the libraries to their latest versions, \n 2. Check the link 'https://snyk.io/vuln?packageManager=all' to learn more about each library's vulnerability", 
		
		"js-libraries": "1. ",
		
		"notification-on-start": "1. Remove the lines where your code asks is requesting permission to send notifications. Remove these calls, and tie the requests to user gestures instead",
		
		"deprecations": "1. ",
		
		"password-inputs-can-be-pasted-into":" 1. Remove the code that's preventing users from pasting into password fields. It's probably a call to preventDefault() within the paste event listener that's associated to the password input element, \n 2. Find and inspect the code that's preventing pasting",
				
		"image-aspect-ratio": "1. Avoiding setting the width or height of an element as a percentage of a variably-sized container, \n 2. Avoid setting explicit width or height values that differ from the source image's dimensions, \n 3. When possible, it's a good practice to specify image width and height in HTML, so that the browser can allocate space for the image, which prevents it from jumping around as the page loads. It's more optimal to specify width and height in HTML rather than CSS, because the browser allocates space before parsing the CSS. In practice this approach can be difficult if you're working with responsive images, because there's no way to specify width and height until you know the viewport dimensions, \n 4. Consider using css-aspect-ratio or Aspect Ratio Boxes to help preserve aspect ratios",
	}
}